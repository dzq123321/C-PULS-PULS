//string  类OJ 
//917. 仅仅反转字母  https://leetcode-cn.com/problems/reverse-only-letters/submissions/
class Solution {
public:
 string reverseOnlyLetters(string S) {
     //通过指针 原理一样
     char *left=(char*)S.c_str();//c_str返回的是const char *，对其进行强转
     char *right=left+S.size()-1;
     while(left < right)
     {
         while(left<right)
         {
             if(isalpha(*left))
             break;
             else
             left++;
         }
         while(left<right)
         {
             if(isalpha(*right))
             break;
             else
             right--;
         }
         if(left<right)
         {
             char tmp=*left;
             *left=*right;
             *right=tmp;
             left++;
             right--;
         }
     }
     return S;
} 
/*  通过数组下标
    string reverseOnlyLetters(string S) {
        int left=0;
        int right=S.size()-1;
        while(left < right)
        {
            while(left < right)
            {
                if(isalpha(S[left]))
                break;
                left++;
            }
             while(left < right)
            {
                if(isalpha(S[right]))
                break;
                right--;
            }
                if(left < right)
                {
                    int tmp = S[left];
                    S[left] =S[right] ;
                    S[right] =tmp;
                    left++;
                    right--;
                }
        } 
        return S;      
    }
    */
};


//387. 字符串中的第一个唯一字符 https://leetcode-cn.com/problems/first-unique-character-in-a-string/submissions/
class Solution {
public:
    int firstUniqChar(string s) {
        //利用find 和 rfind 函数左右查找字符串  以后碰到这样需要查找什么的问题在c++优先考虑利用函数左右查找
        for(int i=0; i<s.size(); i++)
        {
            int left =s.find(s[i]);
            int right =s.rfind(s[i]);
            if(left == right)
            return left;
        }
        return -1;

        /*
        //桶排的思想
       int b[256] ={0};
            for(int i=0; i<s.size(); i++)
            b[s[i]]++;
        for(int i=0; i<s.size(); i++)
        {
            if(b[s[i]] == 1)
            return i;
        }
        return -1;
        */
    }
};

//字符串最后一个单词的长度  https://www.nowcoder.com/practice/8c949ea5f36f422594b306a2300315da
#include<iostream>     //注意牛客和力扣两个平台的区别
#include<string>
using namespace std;
int main()
{
    string str;
    getline (cin,str);
    size_t pos = str.rfind(' ');
    if(pos == string::npos)
        printf("%d",str.size());
    else
        printf("%d",str.size()-pos-1);
    return 0;
}